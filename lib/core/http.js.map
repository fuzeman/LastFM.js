{"version":3,"sources":["core/http.js"],"names":["HttpClient","client","baseUrl","_client","_baseUrl","method","options","params","authenticated","sessionKey","getSessionKey","signed","key","Error","_generateSignature","fetch","encode","then","response","json","catch","err","ok","Promise","reject","data","body","signature","value","Object","keys","sort","forEach","secret","toString"],"mappings":"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","sourcesContent":["import Hex from 'crypto-js/enc-hex';\r\nimport Md5 from 'crypto-js/md5';\r\nimport Merge from 'lodash-amd/merge';\r\nimport QueryString from 'querystring';\r\n\r\nimport {ApiError, NetworkError} from './errors';\r\nimport {isDefined} from './helpers';\r\n\r\n\r\nexport default class HttpClient {\r\n    constructor(client, baseUrl) {\r\n        this._client = client;\r\n        this._baseUrl = baseUrl || 'https://ws.audioscrobbler.com/2.0/';\r\n    }\r\n\r\n    get(method, options) {\r\n        options = Merge({\r\n            params: {},\r\n\r\n            authenticated: false,\r\n            sessionKey: this._client.getSessionKey()\r\n        }, options || {});\r\n\r\n        options.signed = isDefined(options.signed) ?\r\n            options.signed :\r\n            options.authenticated;\r\n\r\n        // Set request parameters\r\n        options.params['api_key'] = this._client.key;\r\n        options.params['format'] = 'json';\r\n        options.params['method'] = method;\r\n\r\n        if(options.authenticated) {\r\n            // Add session key\r\n            if(!isDefined(options.sessionKey)) {\r\n                throw new Error('Missing required \"sessionKey\" parameter');\r\n            }\r\n\r\n            options.params['sk'] = options.sessionKey;\r\n        }\r\n\r\n        if(options.signed) {\r\n            // Generate signature\r\n            options.params['api_sig'] = this._generateSignature(options.params);\r\n        }\r\n\r\n        // Send request\r\n        return fetch(\r\n            this._baseUrl + '?' + QueryString.encode(options.params)\r\n        ).then(function(response) {\r\n            return response.json().catch((err) => {\r\n                if(!response.ok) {\r\n                    throw new NetworkError(response);\r\n                }\r\n\r\n                return Promise.reject(err);\r\n            }).then((data) => {\r\n                if(!response.ok) {\r\n                    throw new ApiError(response, data);\r\n                }\r\n\r\n                return data;\r\n            });\r\n        });\r\n    }\r\n\r\n    post(method, options) {\r\n        options = Merge({\r\n            params: {},\r\n\r\n            authenticated: false,\r\n            sessionKey: this._client.getSessionKey()\r\n        }, options || {});\r\n\r\n        options.signed = isDefined(options.signed) ?\r\n            options.signed :\r\n            options.authenticated;\r\n\r\n        // Set request parameters\r\n        options.params['api_key'] = this._client.key;\r\n        options.params['format'] = 'json';\r\n        options.params['method'] = method;\r\n\r\n        if(options.authenticated) {\r\n            // Add session key\r\n            if(!isDefined(options.sessionKey)) {\r\n                throw new Error('Missing required \"sessionKey\" parameter');\r\n            }\r\n\r\n            options.params['sk'] = options.sessionKey;\r\n        }\r\n\r\n        if(options.signed) {\r\n            // Generate signature\r\n            options.params['api_sig'] = this._generateSignature(options.params);\r\n        }\r\n\r\n        // Send request\r\n        return fetch(this._baseUrl, {\r\n            method: 'POST',\r\n            body: QueryString.encode(options.params)\r\n        }).then(function(response) {\r\n            return response.json().then((data) => {\r\n                if(!response.ok) {\r\n                    throw new ApiError(response, data);\r\n                }\r\n\r\n                return data;\r\n            }).catch((err) => {\r\n                if(!response.ok) {\r\n                    throw new NetworkError(response);\r\n                }\r\n\r\n                return Promise.reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    _generateSignature(params) {\r\n        var signature = '';\r\n\r\n        // Append parameters\r\n        var value;\r\n\r\n        Object.keys(params).sort().forEach((key) => {\r\n            if(key === 'format') {\r\n                return;\r\n            }\r\n\r\n            // Retrieve value\r\n            value = params[key];\r\n\r\n            if(typeof value === 'undefined' || value === null) {\r\n                value = '';\r\n            }\r\n\r\n            // Append parameter\r\n            signature += key + value;\r\n        });\r\n\r\n        // Append client secret\r\n        signature += this._client.secret;\r\n\r\n        // Generate hash\r\n        return Md5(signature).toString(Hex);\r\n    }\r\n}\r\n"],"file":"http.js"}