{"version":3,"sources":["core/http.js"],"names":["HttpClient","client","baseUrl","_client","_baseUrl","method","options","params","authenticated","sessionKey","getSessionKey","signed","key","Error","_generateSignature","fetch","encode","then","response","json","body","signature","value","Object","keys","sort","forEach","secret","toString"],"mappings":"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","file":"core/http.js","sourcesContent":["import {isDefined} from './helpers';\r\n\r\nimport hex from 'crypto-js/enc-hex';\r\nimport md5 from 'crypto-js/md5';\r\nimport merge from 'lodash-amd/merge';\r\nimport querystring from 'querystring';\r\n\r\nexport default class HttpClient {\r\n    constructor(client, baseUrl) {\r\n        this._client = client;\r\n        this._baseUrl = baseUrl || 'https://ws.audioscrobbler.com/2.0/';\r\n    }\r\n\r\n    get(method, options) {\r\n        options = merge({\r\n            params: {},\r\n\r\n            authenticated: false,\r\n            sessionKey: this._client.getSessionKey()\r\n        }, options || {});\r\n\r\n        options.signed = isDefined(options.signed) ?\r\n            options.signed :\r\n            options.authenticated;\r\n\r\n        // Set request parameters\r\n        options.params['api_key'] = this._client.key;\r\n        options.params['format'] = 'json';\r\n        options.params['method'] = method;\r\n\r\n        if(options.authenticated) {\r\n            // Add session key\r\n            if(!isDefined(options.sessionKey)) {\r\n                throw new Error('Missing required \"sessionKey\" parameter');\r\n            }\r\n\r\n            options.params['sk'] = options.sessionKey;\r\n        }\r\n\r\n        if(options.signed) {\r\n            // Generate signature\r\n            options.params['api_sig'] = this._generateSignature(options.params);\r\n        }\r\n\r\n        // Send request\r\n        return fetch(\r\n            this._baseUrl + '?' + querystring.encode(options.params)\r\n        ).then(function(response) {\r\n            // TODO check status code\r\n            return response.json();\r\n        });\r\n    }\r\n\r\n    post(method, options) {\r\n        options = merge({\r\n            params: {},\r\n\r\n            authenticated: false,\r\n            sessionKey: this._client.getSessionKey()\r\n        }, options || {});\r\n\r\n        options.signed = isDefined(options.signed) ?\r\n            options.signed :\r\n            options.authenticated;\r\n\r\n        // Set request parameters\r\n        options.params['api_key'] = this._client.key;\r\n        options.params['format'] = 'json';\r\n        options.params['method'] = method;\r\n\r\n        if(options.authenticated) {\r\n            // Add session key\r\n            if(!isDefined(options.sessionKey)) {\r\n                throw new Error('Missing required \"sessionKey\" parameter');\r\n            }\r\n\r\n            options.params['sk'] = options.sessionKey;\r\n        }\r\n\r\n        if(options.signed) {\r\n            // Generate signature\r\n            options.params['api_sig'] = this._generateSignature(options.params);\r\n        }\r\n\r\n        // Send request\r\n        return fetch(this._baseUrl, {\r\n            method: 'POST',\r\n            body: querystring.encode(options.params)\r\n        }).then(function(response) {\r\n            // TODO check status code\r\n            return response.json();\r\n        });\r\n    }\r\n\r\n    _generateSignature(params) {\r\n        var signature = '';\r\n\r\n        // Append parameters\r\n        var value;\r\n\r\n        Object.keys(params).sort().forEach((key) => {\r\n            if(key === 'format') {\r\n                return;\r\n            }\r\n\r\n            // Retrieve value\r\n            value = params[key];\r\n\r\n            if(typeof value === 'undefined' || value === null) {\r\n                value = '';\r\n            }\r\n\r\n            // Append parameter\r\n            signature += key + value;\r\n        });\r\n\r\n        // Append client secret\r\n        signature += this._client.secret;\r\n\r\n        // Generate hash\r\n        return md5(signature).toString(hex);\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}